/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notebook.view;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import notebook.model.ListOfRuns;
import notebook.model.Run;
import notebook.model.User;

/**
 *
 * @author Mateusz
 */
public class RunnersNotebookGUI extends javax.swing.JFrame {

    /**
     * Creates new form RunnersNotebookGUI
     */
    public RunnersNotebookGUI() {
        initComponents();

        list = new ListOfRuns();
        plannedList = new ListOfRuns();
        user = new User();
        try {
            user.load();
            updateUser();
        } catch (IOException ex) {
            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //load list of runs from file
            list.load("list.tmp");
            plannedList.load("plan.tmp");
            updateList();
            updatePlannedlist();
        } catch (IOException ex) {
            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        updateMarker();
        
//        //displaying list of runs
//        runsList = new javax.swing.JList<>(list.list.toArray(new String[0]));
//        jScrollPane1 = new javax.swing.JScrollPane(runsList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ageTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        weightTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        changeInfoButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addRunButton = new javax.swing.JButton();
        editRunButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        progressTextArea = new javax.swing.JTextArea();
        displayStatisticsButton = new javax.swing.JButton();
        maxHeartRateTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        runsListTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        plannedRunsListTextArea = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        planRunButton = new javax.swing.JButton();
        editPlannedRunButton = new javax.swing.JButton();
        deletePlannedRunButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notatnik biegacza rekreacyjnego");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Lista biegów");

        ageTextField.setEditable(false);
        ageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Wiek");

        weightTextField.setEditable(false);
        weightTextField.setToolTipText("");
        weightTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Masa ciała");

        changeInfoButton.setText("Edytuj informacje");
        changeInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changeInfoButtonMouseReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Informacje o biegaczu");

        addRunButton.setText("Dodaj ostatni bieg");
        addRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addRunButtonMouseReleased(evt);
            }
        });

        editRunButton.setText("Edytuj wybrany bieg");
        editRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editRunButtonMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Marker postępów");

        progressTextArea.setEditable(false);
        progressTextArea.setColumns(20);
        progressTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        progressTextArea.setRows(5);
        jScrollPane2.setViewportView(progressTextArea);

        displayStatisticsButton.setText("Wyświetl statystyki");
        displayStatisticsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayStatisticsButtonMouseReleased(evt);
            }
        });

        maxHeartRateTextField.setEditable(false);

        jLabel6.setText("Tętno maksymalne");

        runsListTextArea.setEditable(false);
        runsListTextArea.setColumns(20);
        runsListTextArea.setRows(5);
        jScrollPane3.setViewportView(runsListTextArea);

        plannedRunsListTextArea.setEditable(false);
        plannedRunsListTextArea.setColumns(20);
        plannedRunsListTextArea.setRows(5);
        jScrollPane1.setViewportView(plannedRunsListTextArea);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Plan biegów");

        planRunButton.setText("Zaplanuj bieg");
        planRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                planRunButtonMouseClicked(evt);
            }
        });

        editPlannedRunButton.setText("Edytuj plan biegu");
        editPlannedRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editPlannedRunButtonMouseClicked(evt);
            }
        });

        deletePlannedRunButton.setText("Usuń plan biegu");
        deletePlannedRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletePlannedRunButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(880, 880, 880))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(maxHeartRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(changeInfoButton)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(displayStatisticsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editRunButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addRunButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(planRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editPlannedRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                    .addComponent(deletePlannedRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addRunButton)
                            .addComponent(planRunButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editRunButton)
                            .addComponent(editPlannedRunButton))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(displayStatisticsButton)
                            .addComponent(deletePlannedRunButton))
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxHeartRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changeInfoButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weightTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightTextFieldActionPerformed

    private void ageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTextFieldActionPerformed

    private void changeInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeInfoButtonMouseReleased
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                //new EditInformationGUI().setVisible(true);
//                EditInformationGUI edit = new EditInformationGUI();
//                edit.setVisible(true);
//                User newUser = edit.updateUser();
//                
//                System.out.println(newUser.getAge() + " " + newUser.getWeight());
//            }
//        });
        JTextField ageEdit = new JTextField();
        JTextField weightEdit = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Wiek"),
            ageEdit,
            new JLabel("Masa ciała"),
            weightEdit
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Edytuj informacje o biegaczu", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + ageEdit.getText() + ", "
                    + weightEdit.getText());
            int a = Integer.parseInt(ageEdit.getText());
            double w = Double.parseDouble(weightEdit.getText());
            System.out.println(user.toString());
            user.setAge(a);
            user.setWeight(w);
            user.countMaxHR();
            try {
                user.save();
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            updateUser();
            updateMarker();
//            ageTextField.setText(ageEdit.getText());
//            weightTextField.setText(weightEdit.getText());
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_changeInfoButtonMouseReleased

    private void addRunButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRunButtonMouseReleased
        JTextField dist = new JTextField();
        JTextField aHR = new JTextField();
        JTextField mHR = new JTextField();
        JTextField date = new JTextField();
        JTextField timeMinutes = new JTextField();
        JTextField timeSeconds = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Dystans w metrach"), dist,
            new JLabel("Czas: minuty"), timeMinutes,
            new JLabel("Czas: sekundy"), timeSeconds,
            new JLabel("Średni puls"), aHR,
            new JLabel("Najwyższy puls"), mHR,
            new JLabel("Data (dd/mm/rrrr)"), date
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Podaj informacje o biegu", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + dist.getText() + ", "
                    + timeMinutes.getText() + ", "
                    + timeSeconds.getText() + ", "
                    + aHR.getText() + ", "
                    + mHR.getText() + ", "
                    + date.getText());
            double d = Double.parseDouble(dist.getText());
            double a = Double.parseDouble(aHR.getText());
            double m = Double.parseDouble(mHR.getText());
            String da = date.getText();
            int tm = Integer.parseInt(timeMinutes.getText());
            double ts = Double.parseDouble(timeSeconds.getText());
            //System.out.println(user.toString());
            try {
                Run newRun = new Run(d, a, m, da, tm, ts);
                list.add(newRun);
                plannedList.updatePlan(newRun.getDate());
            } catch (ParseException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                list.save("list.tmp");
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            updateList();
            updatePlannedlist();
            updateMarker();
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_addRunButtonMouseReleased

    private void displayStatisticsButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayStatisticsButtonMouseReleased
        //Statistics: total distance, avg distance, max distance, avgTime, totalTime, avgHR, avgMaxHR
        double totalDistance = 0;
        double avgDistance;
        double maxDistance = 0;
        int totalMinutes = 0;
        double totalSeconds = 0;
        int avgMinutes;
        double avgSeconds;
        double totalAvgHr = 0;
        double avgMaxHR = 0;
        
        for (int i = 0; i < list.size(); i++) {
            Run r = list.get(i);
            totalDistance += r.getDistance();
            maxDistance = Math.max(maxDistance, r.getDistance());
            totalMinutes += r.getTimeMinutes();
            totalSeconds += r.getTimeSeconds();
            totalAvgHr += r.getAvgHR();
            avgMaxHR += r.getMaxHR();
        }
        
        avgMinutes = totalMinutes / list.size();
        avgSeconds = totalSeconds / list.size();
        avgDistance = totalDistance / list.size();
        totalAvgHr /= list.size();
        avgMaxHR /= list.size();
        
        totalMinutes += (int)totalSeconds/60;
        totalSeconds %= 60;
        
        DecimalFormat df = new DecimalFormat("#.00");
        
        javax.swing.JOptionPane.showMessageDialog(this,
                "Całkowity dystans: \n" + totalDistance + " m\n\n" + 
                "Najdłuższy dystans: \n" + maxDistance + " m\n\n" +
                "Średnia długość biegu: \n" + df.format(avgDistance) + " m\n\n" +
                "Łączny czas biegów: \n" + totalMinutes + ":" + totalSeconds + "\n\n" +
                "Średni czas biegu: \n" + avgMinutes + ":" + df.format(avgSeconds) + "\n\n" +
                "Średnie tętno: \n" + df.format(totalAvgHr) + "\n\n" +
                "Średnia maksymalnego tętna: \n" + df.format(avgMaxHR) + "\n\n",
                "Statystyki",
                JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_displayStatisticsButtonMouseReleased

    private void editRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editRunButtonMouseClicked
        JTextField ind = new JTextField();
        JTextField dist = new JTextField();
        JTextField aHR = new JTextField();
        JTextField mHR = new JTextField();
        JTextField date = new JTextField();
        JTextField timeMinutes = new JTextField();
        JTextField timeSeconds = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Numer biegu"), ind,
            new JLabel("Dystans w metrach"), dist,
            new JLabel("Czas: minuty"), timeMinutes,
            new JLabel("Czas: sekundy"), timeSeconds,
            new JLabel("Średni puls"), aHR,
            new JLabel("Najwyższy puls"), mHR,
            new JLabel("Data (dd/mm/rrrr)"), date
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Edytuj informacje o biegu", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + ind.getText() + ", "
                    + dist.getText() + ", "
                    + timeMinutes.getText() + ", "
                    + timeSeconds.getText() + ", "
                    + aHR.getText() + ", "
                    + mHR.getText() + ", "
                    + date.getText());
            
            int i = Integer.parseInt(ind.getText());
            double d = Double.parseDouble(dist.getText());
            double a = Double.parseDouble(aHR.getText());
            double m = Double.parseDouble(mHR.getText());
            String da = date.getText();
            int tm = Integer.parseInt(timeMinutes.getText());
            double ts = Double.parseDouble(timeSeconds.getText());
            //System.out.println(user.toString());
            try {
                Run newRun = new Run(d, a, m, da, tm, ts);
                list.set(i-1, newRun);
            } catch (ParseException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                list.save("list.tmp");
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            updateList();
            updateMarker();
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_editRunButtonMouseClicked

    private void planRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planRunButtonMouseClicked
        JTextField dist = new JTextField();
        //JTextField aHR = new JTextField();
        //JTextField mHR = new JTextField();
        JTextField date = new JTextField();
        //JTextField timeMinutes = new JTextField();
        //JTextField timeSeconds = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Dystans w metrach"), dist,
            //new JLabel("Czas: minuty"), timeMinutes,
            //new JLabel("Czas: sekundy"), timeSeconds,
            //new JLabel("Średni puls"), aHR,
            //new JLabel("Najwyższy puls"), mHR,
            new JLabel("Data (dd/mm/rrrr)"), date
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Podaj informacje o biegu", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + dist.getText() + ", "
                    //+ timeMinutes.getText() + ", "
                    //+ timeSeconds.getText() + ", "
                    //+ aHR.getText() + ", "
//                    + mHR.getText() + ", "
                    + date.getText());
            double d = Double.parseDouble(dist.getText());
//            double a = Double.parseDouble(aHR.getText());
//            double m = Double.parseDouble(mHR.getText());
            String da = date.getText();
//            int tm = Integer.parseInt(timeMinutes.getText());
//            double ts = Double.parseDouble(timeSeconds.getText());
            //System.out.println(user.toString());
            try {
                Run newRun = new Run(d, da);
                plannedList.add(newRun);
            } catch (ParseException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                plannedList.save("plan.tmp");
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            updatePlannedlist();
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_planRunButtonMouseClicked

    private void editPlannedRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPlannedRunButtonMouseClicked
        JTextField ind = new JTextField();
        JTextField dist = new JTextField();
        JTextField date = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Numer biegu"), ind,
            new JLabel("Dystans w metrach"), dist,
            new JLabel("Data (dd/mm/rrrr)"), date
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Podaj informacje o biegu", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + ind.getText() + ", "
                    + dist.getText() + ", "
                    + date.getText());
            
            int i = Integer.parseInt(ind.getText());
            double d = Double.parseDouble(dist.getText());
            String da = date.getText();
            try {
                Run newRun = new Run(d, da);
                plannedList.set(i-1, newRun);
            } catch (ParseException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                plannedList.save("plan.tmp");
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            updatePlannedlist();
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_editPlannedRunButtonMouseClicked

    private void deletePlannedRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePlannedRunButtonMouseClicked
        JTextField ind = new JTextField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Numer planu do usunięcia"), ind
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Usuń planowany bieg", JOptionPane.PLAIN_MESSAGE);
        
        if (result == JOptionPane.YES_NO_OPTION) {
            System.out.println("You entered "
                    + ind.getText());
            
            int i = Integer.parseInt(ind.getText());
            
            plannedList.remove(i-1);
            
            try {
                plannedList.save("plan.tmp");
            } catch (IOException ex) {
                Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            updatePlannedlist();
        } else {
            System.out.println("User canceled / closed the dialog, result = " + result);
        }
    }//GEN-LAST:event_deletePlannedRunButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunnersNotebookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunnersNotebookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunnersNotebookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunnersNotebookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunnersNotebookGUI().setVisible(true);
            }
        });
    }

//    public void setList(){
//        ListOfRuns list = new ListOfRuns();
//        
//        try {
//            //load list of runs from file
//            list.load();
//        } catch (IOException ex) {
//            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(RunnersNotebookGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        runsList = new javax.swing.JList<>(list.list.toArray(new String[0]));
//        
//        jScrollPane1 = new javax.swing.JScrollPane(runsList);
//        
//    }
    public void updateUser() {
        DecimalFormat df = new DecimalFormat("#.00");
        
        String a = "" + user.getAge();
        String w = "" + user.getWeight();
        String h = "" + df.format(user.getMaxHR());

        ageTextField.setText(a);
        weightTextField.setText(w);
        maxHeartRateTextField.setText(h);
    }

    public void updateList() {
        //displaying list of runs
//        runsList = new javax.swing.JList(list.list.toArray());
//        jScrollPane1 = new javax.swing.JScrollPane(runsList);

        //metoda 2
        //javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
//        listModel = new javax.swing.DefaultListModel();
//        
//        for (int i = 0; i < list.size(); i++) {
//            Run r = list.get(i);
//            listModel.addElement(r.toString());
//            progressTextArea.append(r.toString() + "\n");
//        }
//
//        runsList = new javax.swing.JList(listModel);
//        jScrollPane1 = new javax.swing.JScrollPane(runsList);
//        runsList.setVisible(true);
        //metoda 3
        //runsList = new javax.swing.JList(list.list.toArray());
        
        
        //mock for jList
        runsListTextArea.removeAll();
        runsListTextArea.setText("");
        runsListTextArea.append("Lp.\tData\tDystans\tCzas\tŚrednie tętno\tMaksymalne tętno\n");
        for (int i = 0; i < list.size(); i++) {
            Run r = list.get(i);
            runsListTextArea.append((i+1) + ".\t" + r.toString() + "\n");
        }
    }
    
    public void updatePlannedlist(){
        plannedRunsListTextArea.removeAll();
        plannedRunsListTextArea.setText("");
        plannedRunsListTextArea.append("Lp.\tData\tDystans\n");
        for (int i = 0; i < plannedList.size(); i++) {
            Run r = plannedList.get(i);
            plannedRunsListTextArea.append((i+1) + ".\t" + String.format("%02d", r.getDate().getDate()) + "/" + String.format("%02d", r.getDate().getMonth()+1) + "/" + (r.getDate().getYear()+1900) + "\t" + r.getDistance() + "\n");
        }
    }
    
    public void updateMarker(){
        int i = list.size()-1;
        if(i < 2){
            progressTextArea.setText("Za mało biegów do wyznaczenia progresu");
        } else {
            double a = list.get(i).getRatio();
            double b = list.get(i-1).getRatio();
            double c = list.get(i-2).getRatio();
            
            if((a > b) && (b > c)){
                progressTextArea.setText("Progresja treningu");
            } else if((a < b) && (b < c)){
                progressTextArea.setText("Odnotowano możliwość przetrenowania!\nNależy zmniejszyć prędkość biegu o 25%");
            } else {
                progressTextArea.setText("Brak widocznej progresji treningu");
            }
            
        }
        
        if(i > 0 && list.get(i).getMaxHR() > user.getMaxHR()){
            progressTextArea.append("\n\nPRZEKROCZONO WARTOŚĆ PULSU MAKSYMALNEGO!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRunButton;
    private javax.swing.JTextField ageTextField;
    private javax.swing.JButton changeInfoButton;
    private javax.swing.JButton deletePlannedRunButton;
    private javax.swing.JButton displayStatisticsButton;
    private javax.swing.JButton editPlannedRunButton;
    private javax.swing.JButton editRunButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField maxHeartRateTextField;
    private javax.swing.JButton planRunButton;
    private javax.swing.JTextArea plannedRunsListTextArea;
    private javax.swing.JTextArea progressTextArea;
    private javax.swing.JTextArea runsListTextArea;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables
    public User user;
    public ListOfRuns list;
    public ListOfRuns plannedList;
    javax.swing.DefaultListModel listModel;
}
